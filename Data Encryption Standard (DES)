#include <stdio.h>
#include <string.h>
// Function to convert a number to binary string
void dec2bin(int num, char *bin_str) {
bin_str[0] = '\0';
for (int i = 31; i >= 0; i--) {
strcat(bin_str, ((num >> i) & 1) ? "1" : "0");
}
}
// Function to convert a hexadecimal string to binary string
void hex2bin(char *hex, char *bin) {
bin[0] = '\0';
for (int i = 0; hex[i] != '\0'; i++) {
switch (hex[i]) {
case '0': strcat(bin, "0000"); break;
case '1': strcat(bin, "0001"); break;
case '2': strcat(bin, "0010"); break;
case '3': strcat(bin, "0011"); break;
case '4': strcat(bin, "0100"); break;
case '5': strcat(bin, "0101"); break;
case '6': strcat(bin, "0110"); break;
case '7': strcat(bin, "0111"); break;
case '8': strcat(bin, "1000"); break;
case '9': strcat(bin, "1001"); break;
case 'A': case 'a': strcat(bin, "1010"); break;
case 'B': case 'b': strcat(bin, "1011"); break;
case 'C': case 'c': strcat(bin, "1100"); break;
case 'D': case 'd': strcat(bin, "1101"); break;
case 'E': case 'e': strcat(bin, "1110"); break;
case 'F': case 'f': strcat(bin, "1111"); break;
}
}
}
// Function to perform a permutation
void permute(char *input, int *perm_table, int n, char *output) {
for (int i = 0; i < n; i++) {
output[i] = input[perm_table[i] - 1];
}
output[n] = '\0';
}
// Function to perform a left circular shift
void shift_left(char *key_half, int shifts) {
char temp[28];
strncpy(temp, key_half, shifts);
memmove(key_half, key_half + shifts, 28 - shifts);
strncpy(key_half + 28 - shifts, temp, shifts);
}
// Function to perform XOR
void xor(char *a, char *b, char *result) {
for (int i = 0; i < strlen(a); i++) {
result[i] = (a[i] == b[i]) ? '0' : '1';
}
result[strlen(a)] = '\0';
}
// Function to perform S-Box substitution
void sbox_func(char *input, char *output) {
int sbox[8][4][16] = {
{
{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
{0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
{4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
{15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
},
{
{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
{3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
{0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
{13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
},
{
{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
{13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
{13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
{1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
},
{
{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
{13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
{10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
{3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
},
{
{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
{14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
{4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
{11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
},
{
{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
{10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
{9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
{4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
},
{
{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
{13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
{1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
{6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
},
{
{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
{1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
{7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
{2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
}
};
for (int i = 0; i < 8; i++) {
int row = 2 * (input[i * 6] - '0') + (input[i * 6 + 5] - '0');
int col = 8 * (input[i * 6 + 1] - '0') + 4 * (input[i * 6 + 2] - '0') +
2 * (input[i * 6 + 3] - '0') + (input[i * 6 + 4] - '0');
int val = sbox[i][row][col];
char bin[5];
dec2bin(val, bin);
strncat(output, bin + 28, 4);
}
output[32] = '\0';
}
int main() {
// Example input and setup
char hex_input[] = "02468aceeca86420";
char bin_input[65];
hex2bin(hex_input, bin_input);
// Initial Permutation Table
int initial_perm[64] = {
58, 50, 42, 34, 26, 18, 10, 2,
60, 52, 44, 36, 28, 20, 12, 4,
62, 54, 46, 38, 30, 22, 14, 6,
64, 56, 48, 40, 32, 24, 16, 8,
57, 49, 41, 33, 25, 17, 9, 1,
59, 51, 43, 35, 27, 19, 11, 3,
61, 53, 45, 37, 29, 21, 13, 5,
63, 55, 47, 39, 31, 23, 15, 7
};
// Final Permutation Table
int final_perm[64] = {
40, 8, 48, 16, 56, 24, 64, 32,
39, 7, 47, 15, 55, 23, 63, 31,
38, 6, 46, 14, 54, 22, 62, 30,
37, 5, 45, 13, 53, 21, 61, 29,
36, 4, 44, 12, 52, 20, 60, 28,
35, 3, 43, 11, 51, 19, 59, 27,
34, 2, 42, 10, 50, 18, 58, 26,
33, 1, 41, 9, 49, 17, 57, 25
};
// Permutation Choice 1 Table
int pc1[56] = {
57, 49, 41, 33, 25, 17, 9,
1, 58, 50, 42, 34, 26, 18,
10, 2, 59, 51, 43, 35, 27,
19, 11, 3, 60, 52, 44, 36,
63, 55, 47, 39, 31, 23, 15,
7, 62, 54, 46, 38, 30, 22,
14, 6, 61, 53, 45, 37, 29,
21, 13, 5, 28, 20, 12, 4
};
// Permutation Choice 2 Table
int pc2[48] = {
14, 17, 11, 24, 1, 5, 3, 28,
15, 6, 21, 10, 23, 19, 12, 4,
26, 8, 16, 7, 27, 20, 13, 2,
41, 52, 31, 37, 47, 55, 30, 40,
51, 45, 33, 48, 44, 49, 39, 56,
34, 53, 46, 42, 50, 36, 29, 32
};
// Expansion D-box Table
int exp_d[48] = {
32, 1, 2, 3, 4, 5, 4, 5,
6, 7, 8, 9, 8, 9, 10, 11,
12, 13, 12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21, 20, 21,
22, 23, 24, 25, 24, 25, 26, 27,
28, 29, 28, 29, 30, 31, 32, 1
};
// S-boxes (already defined in the sbox_func)
// Permutation Table
int per[32] = {
16, 7, 20, 21,
29, 12, 28, 17,
1, 15, 23, 26,
5, 18, 31, 10,
2, 8, 24, 14,
32, 27, 3, 9,
19, 13, 30, 6,
22, 11, 4, 25
};
// Shifting table
int shift_table[16] = {
1, 1, 2, 2,
2, 2, 2, 2,
1, 2, 2, 2,
2, 2, 2, 1
};
char permuted_input[65];
permute(bin_input, initial_perm, 64, permuted_input);
char left[33], right[33];
strncpy(left, permuted_input, 32);
strncpy(right, permuted_input + 32, 32);
left[32] = '\0';
right[32] = '\0';
char key[65] =
"0001001100110100010101110111100110011011101111001101111111110001";
char keyp[57];
permute(key, pc1, 56, keyp);
char left_key[29], right_key[29];
strncpy(left_key, keyp, 28);
strncpy(right_key, keyp + 28, 28);
left_key[28] = '\0';
right_key[28] = '\0';
printf("After key permutation: \n");
printf("C0=%s\n", left_key);
printf("D0=%s\n", right_key);
// Shifting and generating keys
char round_keys[16][49];
for (int i = 0; i < 16; i++) {
// Perform the shifting
shift_left(left_key, shift_table[i]);
shift_left(right_key, shift_table[i]);
printf("C%d=%s\n", i + 1, left_key);
printf("D%d=%s\n", i + 1, right_key);
// Combine C and D
char combined_key[57] = "";
strncat(combined_key, left_key, 28);
strncat(combined_key, right_key, 28);
// Permute combined key to get Ki
permute(combined_key, pc2, 48, round_keys[i]);
round_keys[i][48] = '\0';
printf("K%d=%s\n", i + 1, round_keys[i]);
}
for (int i = 0; i < 16; i++) {
// Expansion permutation
char right_exp[49];
permute(right, exp_d, 48, right_exp);
// XOR with round key
char xor_output[49];
xor(right_exp, round_keys[i], xor_output);
// S-box substitution
char sbox_output[33] = "";
sbox_func(xor_output, sbox_output);
// Permutation
char perm_output[33];
permute(sbox_output, per, 32, perm_output);
// XOR with left
char new_right[33];
xor(left, perm_output, new_right);
strncpy(left, right, 32);
strncpy(right, new_right, 32);
}
// Combine left and right
char combined_text[65] = "";
strncat(combined_text, right, 32);
strncat(combined_text, left, 32);
// Final permutation
char cipher_text[65];
permute(combined_text, final_perm, 64, cipher_text);
printf("Cipher Text: %s\n", cipher_text);
return 0;
}
