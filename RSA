#include<stdio.h>
int gcd(int num1,int num2) {
int numerator,denominator,remainder;
if (num1 > num2)
{
numerator = num1;
denominator = num2;
}
else
{
numerator = num2;
denominator = num1;
}
remainder = numerator % denominator;
while (remainder != 0)
{
numerator = denominator;
denominator = remainder;
remainder = numerator % denominator;
}
return denominator;
}
long long int power(long long int base, long long int exp, long long int P) {
if (exp == 0)
return 1;
long long int result = 1;
base = base % P;
while (exp > 0) {
if (exp % 2 == 1)
result = (result * base) % P;
exp = exp / 2;
base = (base * base) % P;
}
return result;
}
int modInverse(int a, int m) {
int m0 = m, t, q;
int x0 = 0, x1 = 1;
if (m == 1) return 0;
while (a > 1) {
q = a / m;
t = m;
m = a % m, a = t;
t = x0;
x0 = x1 - q * x0;
x1 = t;
}
if (x1 < 0) x1 += m0;
return x1;
}
int main() {
int p = 17, q = 7;
int n = p * q;
int euler_totient = (p - 1) * (q - 1);
printf("Euler's totient function: %d\n", euler_totient);
int e = 0;
for (int i = 2; i < euler_totient; i++) {
if (gcd(i, euler_totient) == 1) {
e = i;
break;
}
}
printf("Public key exponent (e): %d\n", e);
int d = modInverse(e, euler_totient);
printf("Private key exponent (d): %d\n", d);
int message = 12;
int encrypted_message = power(message, e, n);
printf("Encrypted message: %d\n", encrypted_message);
int decrypted_message = power(encrypted_message, d, n);
printf("Decrypted message: %d\n", decrypted_message);
return 0;
}
