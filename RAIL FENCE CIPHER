#include <stdio.h>
#include <string.h>
void encryptRailFence(char *plaintext, int rails, char *ciphertext) {
int len = strlen(plaintext);
int k = 0;
// Create a 2D array to simulate the rails
char rail[rails][len];
// Initialize the rail matrix with null characters
for (int i = 0; i < rails; i++) {
for (int j = 0; j < len; j++) {
rail[i][j] = '\0';
}
}
// Fill the rail matrix with characters of the plaintext
int row = 0;
int direction = 1; // 1 means moving down, -1 means moving up
for (int i = 0; i < len; i++) {
rail[row][i] = plaintext[i];
if (row == 0) {
direction = 1;
} else if (row == rails - 1) {
direction = -1;
}
row += direction;
}
// Read the rail matrix row-wise to get the ciphertext
for (int i = 0; i < rails; i++) {
for (int j = 0; j < len; j++) {
if (rail[i][j] != '\0') {
ciphertext[k++] = rail[i][j];
}
}
}
ciphertext[k] = '\0';
}
int main() {
char plaintext[256];
char ciphertext[256];
int rails;
// Get the plaintext from the user
printf("Enter the plaintext: ");
fgets(plaintext, sizeof(plaintext), stdin);
plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove the newline character
// Get the number of rails from the user
printf("Enter the number of rails: ");
scanf("%d", &rails);
// Encrypt the plaintext using the Rail Fence cipher
encryptRailFence(plaintext, rails, ciphertext);
// Output the ciphertext
printf("Encrypted text: %s\n", ciphertext);
return 0;
}
